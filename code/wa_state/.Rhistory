control = sdmTMBcontrol(start = list(b_threshold = start)))
View(m2)
library(ggeffects)
library("ggeffects")
mydf <- ggpredict(m2, terms = "mi")
dplyr_installed <- require("dplyr", quietly = TRUE)
ggplot_installed <- require("ggplot2", quietly = TRUE)
inla_installed <- requireNamespace("INLA", quietly = TRUE)
pkgs <- dplyr_installed && ggplot_installed && inla_installed
EVAL <- identical(Sys.getenv("NOT_CRAN"), "true") && pkgs
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 7,
fig.asp = 0.618,
eval = EVAL,
purl = EVAL
)
library("ggeffects")
mydf <- ggpredict(m2, terms = "mi")
library("prediction")
install.packages("prediction")
install.packages("prediction")
library("prediction")
mydf <- ggpredict(m2, terms = "mi")
beta1 <- -0.4
beta3 <- 0.3
delta <- 3
x50 <- 5
log_mu <- beta1 + beta3 * (1 / (1 + exp(-log(19) * (mi - x50) / delta)) - 1)
mu <- exp(log_mu)
obs <- rlnorm(N, log_mu - 0.5 * sigma^2, sigma)
dat <- data.frame(y = obs, po2 = po2, invtemp = invtemp)
start <- matrix(0, ncol = 1, nrow = 4)
start[1,1] <- x50
start[2,1] <- delta
start[3,1] <- beta3
start[4,1] <- Eo
m2 <- sdmTMB(y ~ logistic(mi),
data = dat,
spatial = "off",
family = lognormal(),
control = sdmTMBcontrol(start = list(b_threshold = start))) #Specify starting parameters
tidy(m2)
print(m2)
mydf <- ggpredict(m2, terms = "mi")
library(visreg)
visreg(m2, xvar="mi")
#Generate random temperature and oxygen data
N <- 3000
set.seed(123)
temp <- rnorm(N)
po2 <- rlnorm(N)
kelvin = 273.15 #For converting celsius to Kelvin
boltz = 0.000086173324 #Boltzmann's constant
tref <- 12 #Reference temperature
#Calcualte inverse temperature
env$invtemp <- (1 / boltz)  * ( 1 / (temp + 273.15) - 1 / (tref + 273.15))
#Generate random temperature and oxygen data
N <- 3000
set.seed(123)
temp <- rnorm(N)
po2 <- rlnorm(N)
kelvin = 273.15 #For converting celsius to Kelvin
boltz = 0.000086173324 #Boltzmann's constant
tref <- 12 #Reference temperature
#Calcualte inverse temperature
env$invtemp <- (1 / boltz)  * ( 1 / (temp + 273.15) - 1 / (tref + 273.15))
#Generate random temperature and oxygen data
N <- 3000
set.seed(123)
temp <- rnorm(N)
po2 <- rlnorm(N)
kelvin = 273.15 #For converting celsius to Kelvin
boltz = 0.000086173324 #Boltzmann's constant
tref <- 12 #Reference temperature
#Calculate inverse temperature
invtemp <- (1 / boltz)  * ( 1 / (temp + 273.15) - 1 / (tref + 273.15))
Eo <-  0.3
mi <- po2 * exp(Eo * invtemp)
Eo <-  0.3
mi <- po2 * exp(Eo * invtemp)
beta1 <- -0.4
beta3 <- 0.3
delta <- 3
x50 <- 5
log_mu <- beta1 + beta3 * (1 / (1 + exp(-log(19) * (mi - x50) / delta)) - 1)
mu <- exp(log_mu)
obs <- rlnorm(N, log_mu - 0.5 * sigma^2, sigma)
beta1 <- -0.4
beta3 <- 0.3
delta <- 3
x50 <- 5
log_mu <- beta1 + beta3 * (1 / (1 + exp(-log(19) * (mi - x50) / delta)) - 1)
mu <- exp(log_mu)
sigma <- 0.05
obs <- rlnorm(N, log_mu - 0.5 * sigma^2, sigma)
dat <- data.frame(y = obs, po2 = po2, invtemp = invtemp)
start <- matrix(0, ncol = 1, nrow = 4)
start[1,1] <- x50
start[2,1] <- delta
start[3,1] <- beta3
start[4,1] <- Eo
m2 <- sdmTMB(y ~ logistic(mi),
data = dat,
spatial = "off",
family = lognormal(),
control = sdmTMBcontrol(start = list(b_threshold = start))) #Specify starting parameters
tidy(m2)
print(m2)
ggpredict(m2, terms="mi")
ggpredict(m2, terms="mi")
visreg(m2, xvar="mi")
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
install.packages("ncdf4")
library(ncdf4) # package for netcdf manipulation
nc_data <- nc_open('~/Dropbox/Mac (2)/Downloads/cmems_mod_glo_bgc_my_0.25_P1D-m_1691610748846.nc')
library(CopernicusMarine)
library(lubridate)
###Temperature data
download5 <- function(start, end){
copernicus_download_motu(
username = "jindivero",
password = "MaRcH131995**",
destination= "~/Dropbox/Mac (2)/Downloads",
product= "GLOBAL_MULTIYEAR_PHY_001_030",
layer= "cmems_mod_glo_phy_my_0.083_P1D-m",
variable="po2",
output="netcdf",
region=c(-179.6, 51,-133, 65),
timerange=c(start, end),
verticalrange=c(9,1300),
overwrite = FALSE
)
}
starts5a <- seq(ymd(20090701), ymd(20200701), by="1 year")
ends5a <- seq(ymd(20090831), ymd(20200831), by="1 year")
mapply(download5, starts5a, ends5a)
library(ncdf4)
library(lubridate)
library(dplyr)
#List files
files <- list.files("~/Dropbox/choke species/code/choke-species-data/data/Copernicus/o2/alaska", all.files=T, pattern=".nc", full.names=T)
files2 <- list.files("~/Dropbox/choke species/code/choke-species-data/data/Copernicus/o2/nwfsc", all.files=T, pattern=".nc", full.names=T)
files3 <- list.files("~/Dropbox/choke species/code/choke-species-data/data/Copernicus/o2/bc", all.files=T, pattern=".nc", full.names=T)
files <- append(files, files2)
files <- append(files, files3)
# Function to extract all information from each one
extract_info <- function(file){
#Extract coordinates, time, depth
nc_ds <-  nc_open(file)
dim_lon <- ncvar_get(nc_ds, "longitude")
dim_lat <- ncvar_get(nc_ds, "latitude")
dim_depth <- ncvar_get(nc_ds, "depth")
dim_time <- ncvar_get(nc_ds, "time")
#Convert time to YYY-MM-DD format
t_units <- ncatt_get(nc_ds, "time", "units")
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + dhours(dim_time)
#Create coordinates
coords <- as.matrix(expand.grid(dim_lon, dim_lat, dim_depth, date))
#Extract the variables
var1 <- ncvar_get(nc_ds, "o2", collapse_degen=FALSE)
nc_df <- matrix(cbind(coords, var1))
names(nc_df) <- c("lon", "lat", "depth", "time", "po2")
return(nc_df)
}
o2 <- lapply(files, extract_info)
gc()
o2 <- mclapply(files, extract_info)
library(parallel)
o2 <- mclapply(files, extract_info)
# Function to extract all information from each one
extract_info <- function(file){
#Extract coordinates, time, depth
nc_ds <-  nc_open(file)
dim_lon <- ncvar_get(nc_ds, "longitude")
dim_lat <- ncvar_get(nc_ds, "latitude")
dim_depth <- ncvar_get(nc_ds, "depth")
dim_time <- ncvar_get(nc_ds, "time")
#Convert time to YYY-MM-DD format
t_units <- ncatt_get(nc_ds, "time", "units")
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + dhours(dim_time)
#Create coordinates
coords <- as.matrix(expand.grid(dim_lon, dim_lat, dim_depth, date))
#Extract the variables
var1 <- ncvar_get(nc_ds, "o2", collapse_degen=FALSE)
nc_df <- as.data.frame(cbind(coords, var1))
names(nc_df) <- c("lon", "lat", "depth", "time", "po2")
return(nc_df)
}
?mclapply
o2 <- mclapply(files, extract_info)
View(o2)
View(o2)
weighted_average <- readRDS("~/Library/CloudStorage/Dropbox/Pollock/for_github/data/model_processed_outputs/weighted_average.rds")
View(weighted_average)
model_index_weight <- readRDS("~/Library/CloudStorage/Dropbox/Pollock/for_github/data/model_processed_outputs/model_index_weight.rds")
View(model_index_weight)
View(weighted_average)
library(devtools)
install.packages("Matrix", dependencies=TRUE, force=TRUE)
library(dplyr)
library(devtools)
install_github("ropensci/taxize")
library(taxize)
install.packages("rfishbase")
library(rfishbase)
install.packages("gsw")
library(gsw)
library(dplyr)
library(readxl)
library(stringr)
# organize files
install.packages("ncdf4")
library(ncdf4)
library(raster)
install.packages("lubridate")
library(lubridate)
library(dplyr)
library(parallel)
install.packages("ncdf4.helpers")
library(ncdf4.helpers)
library(RANN)
library(ggplot2)
library(readxl)
library(sf)
library(tidync)
#extract specific value
extract_haul <- function(tstep, depth_haul, lon_haul, lat_haul){
nc_df <- nc %>% hyper_filter(time=(time==tstep), depth=(depth==depth_haul), longitude=(longitude==lon_haul)) %>%
hyper_tibble() %>%
filter(abs(latitude - lat_haul) == min(abs(latitude - lat_haul)))
nc_df
}
###Load haul info for NOAA West Coast and IPHC
load("/Users/jindiv/Library/CloudStorage/Dropbox/choke species/code/choke-species-data/data/fish_raw/NOAA/nwfsc_haul.rda")
IPHC <-  read_excel("~/Dropbox/choke species/code/choke-species-data/data/fish_raw/IPHC/IPHC_FISS_set_halibut.xlsx")
##Housekeeping
colnames(IPHC) <- tolower(colnames(IPHC))
IPHC <- IPHC[,c("stlkey", "date", "beginlat", "beginlon", "begindepth (fm)", "temp c", "salinity psu", "oxygen_ml", "oxygen_umol", "oxygen_sat")]
IPHC$lat_start <- IPHC$beginlat
IPHC$beginlat <- NULL
IPHC$lon_start <- IPHC$beginlon
IPHC$beginlon <- NULL
IPHC$depth_IPHC <- IPHC$`begindepth (fm)`
IPHC$`begindepth (fm)` <- NULL
##Combine
haul_combined <- bind_rows(nwfsc_haul, IPHC)
##More housekeeping
#Restrict to coordinates of WC
haul_combined <- subset(haul_combined, lat_start<=49)
#Isolate just date
haul_combined$date2 <- as.POSIXct(substr(haul_combined$date, 1,11))
#Restrict to only years that we have GLORYS data for
haul_combined <- subset(haul_combined, date2>as.POSIXct("1993-01-01"))
#Remove 2022 (only have GLORYS data for 2021)
haul_combined <- subset(haul_combined, date2<as.POSIXct("2021-12-31"))
#Combine IPHC and trawl depths into same column
haul_combined$depth_m <- ifelse(is.na(haul_combined$depth_m), haul_combined$depth_IPHC, haul_combined$depth_m)
###oxygen
setwd("~/Dropbox/choke species/code/Copernicus/o2/nwfsc")
glorys_dat <- readRDS(file="glorys_wc_o2.rds")
for(i in 1:1){
if(nrow(glorys_dat[[i]])>1) {
x <- glorys_dat[[i]]%>%summarise_all(funs(mean))
glorys_dat2[[i]] <- x
}
if(nrow(glorys_dat[[i]])==1){
x <- glorys_dat[[i]]
glorys_dat2[[i]] <- x
}
}
#Average if multiple rows (with multiple latitudes)
glorys_dat2 <- list()
for(i in 1:3){
if(nrow(glorys_dat[[i]])>1) {
x <- glorys_dat[[i]]%>%summarise_all(funs(mean))
glorys_dat2[[i]] <- x
}
if(nrow(glorys_dat[[i]])==1){
x <- glorys_dat[[i]]
glorys_dat2[[i]] <- x
}
}
View(glorys_dat2)
#Average if multiple rows (with multiple latitudes)
glorys_dat2 <- list()
for(i in 1:length(glorys_dat)){
if(nrow(glorys_dat[[i]])>1) {
x <- glorys_dat[[i]]%>%summarise_all(funs(mean))
glorys_dat2[[i]] <- x
}
if(nrow(glorys_dat[[i]])==1){
x <- glorys_dat[[i]]
glorys_dat2[[i]] <- x
}
}
warnings()
View(glorys_dat2)
#Bind into one dataframe
glorys <- bind_rows(glorys_dat2)
#Save
saveRDS(glorys, file="glorys_wc_o2.rds")
View(glorys)
#Convert time into correct date format
glorys$time <- (as_datetime("1950-01-01 00:00:00")+hours(glorys$time))
#Convert time into correct date format
glorys$time <- (as_datetime("1950-01-01")+hours(glorys$time))
#Bind into one dataframe
glorys <- bind_rows(glorys_dat2)
#Convert time into correct date format
glorys$time <- (as_datetime("1950-01-01")+hours(glorys$time))
#Bind into one dataframe
glorys <- bind_rows(glorys_dat2)
#Bind into one dataframe
glorys <- bind_rows(glorys_dat2)
#Convert time into correct date format
glorys$time <- (as_datetime("1950-01-01")+hours(glorys$time))
glorys$time <- as.character(as.Date(nc_bottom_all2$time, format='%m/%d/%Y'))
glorys$time <- as.character(as.Date(glorys$time, format='%m/%d/%Y'))
View(glorys)
#Rename columns
colnames(glorys) <- c("no3_glorys", "o2_glorys", "po4_glorys", "chl_glorys", "si_glorys", "nppv_glorys", "lon_gloryso2", "lat_gloryso2", "depth_gloryso2", "date_gloryso2")
saveRDS(glorys, file="glorys_wc_o2.rds")
#Bind with haul data
glorys_haul <- bind_cols(glorys, haul_combined)
saveRDS(glorys, file="glorys_haul_wc_o2.rds")
library(dplyr)
library(ggplot2)
library(sp)
library(tidyr)
#Set working directory
setwd("~/Dropbox/choke species/code/choke-species-data/code/wa_state")
### Set ggplot themes ###
theme_set(theme_bw(base_size = 35))
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
dat <- glorys
dat <- glorys_haul
###Distance of haul from GLORYS point
##Oxygen
test <- matrix(nrow=nrow(dat))
for(i in 1:nrow(dat)){
dist <- spDistsN1(as.matrix(dat[i,c("lon_start", "lat_start")]),as.matrix(dat[i,c("lon_gloryso2", "lat_gloryso2")]),longlat=FALSE)
test[i] <- dist
}
dat$dist_o2 <- test
##Temp-sal
test <- matrix(nrow=nrow(dat))
for(i in 1:nrow(dat)){
dist <- spDistsN1(as.matrix(dat[i,c("lon_start", "lat_start")]),as.matrix(dat[i,c("lon_glorysphys", "lat_glorysphys")]),longlat=FALSE)
test[i] <- dist
}
## Plot
ggplot(dat, aes(x=dist_o2))+geom_histogram()+xlab("Distance between haul and o2 GLORYS (km)")
#Map differences
ggplot(dat, aes(x=lat_start, y=lon_start))+geom_point(aes(color=dist_o2))
#Map differences
ggplot(dat, aes(x=lon_start, y=lat_start))+geom_point(aes(color=dist_o2))
#Mapping background
coast <- ne_states(country='United States of America',returnclass = 'sf') %>%
filter(name %in% c('California','Oregon','Washington','Nevada'))
library(rnaturalearth)
coast <- ne_states(country='United States of America',returnclass = 'sf') %>%
filter(name %in% c('California','Oregon','Washington','Nevada'))
coast <- ne_states(country='United States of America',returnclass = 'sf') %>%
filter(name %in% c('California','Oregon','Washington','Nevada'))
###Difference in depth between coordinates (root squared error)
#Get haul_depth column
#bottom_depth, depth_m, depth_IPHC
dat$depth_haul <- case_when(is.na(dat$depth_m) & is.na(dat$bottom_depth)~dat$depth_IPHC,
is.na(dat$depth_m) & is.na(dat$depth_IPHC)~dat$bottom_depth,
is.na(dat$bottom_depth) & is.na(dat$depth_IPHC)~dat$depth_m)
dat$depth_diffo2 <- dat$depth_m-dat$depth_gloryso2
#Plot
ggplot(dat, aes(x=depth_diffo2))+geom_histogram()+xlab("Difference in reported haul depth and GLORYS depth o2 (m)")
#Map differences
ggplot(dat, aes(x=lon_start, y=lat_start))+geom_point(aes(color=dist_o2))+facet_wrap("year")
#Add year column
dat$year <- year(dat$date2)
#Map differences
ggplot(dat, aes(x=lon_start, y=lat_start))+geom_point(aes(color=dist_o2))+facet_wrap("year")
#Plot oxygen values
ggplot(dat, aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
#Histogram of oxygen values
ggplot(dat, aes(x=o2_glorys)+geom_histogram()
#Histogram of oxygen values
ggplot(dat, aes(x=o2_glorys))+geom_histogram()
#Histogram of oxygen values
ggplot(dat, aes(x=o2_glorys))+geom_histogram()
#Histogram of oxygen values
ggplot(dat, aes(x=o2_glorys))+geom_histogram(bins=500)+xlab("GLORYS oxygen mmol per m^2")
ggplot(subset(dat, o2_glorys<50), aes(x=o2_glorys))+geom_histogram()+xlab("GLORYS oxygen mmol per m^2")
View(glorys_dat)
View(glorys_haul)
#Oxygen
nc_bottom_all2 <- readRDS("~/Dropbox/choke species/code/choke-species-data/data/glorys/full_regions_bottom/glorys_o2_bc_full_region_bottom copy.rds")
#Pick a random latitude/longitude
#Pick a random coordinate by drawing a random number from the dataset, and then subsetting the data to only that coordinate
test <-sample(1:nrow(nc_bottom_all2), 1)
test <- nc_bottom_all2[test, 7:8]
test <- subset(nc_bottom_all2, latitude==test$latitude & longitude==test$longitude)
#Plot time series of one year
ggplot(subset(test, time>as.POSIXct("2009-07-01") & time<as.POSIXct("2009-07-30")), aes(x=time, y=o2))+geom_line()+ylab("Oxygen mmol m^3")+xlab("Date")
#Oxygen
nc_bottom_all2 <- readRDS("~/Dropbox/choke species/code/choke-species-data/data/glorys/full_regions_bottom/glorys_o2_bc_full_region_bottom copy.rds")
test <- subset(nc_bottom_all2, latitude==-125 & longitude==44.5)
#Plot time series of one year
ggplot(subset(test, time>as.POSIXct("2011-08-15") & time<as.POSIXct("2011-09-15")), aes(x=time, y=o2))+geom_line()+ylab("Oxygen mmol m^3")+xlab("Date")
#Oxygen
nc_bottom_all2 <- readRDS("~/Dropbox/choke species/code/choke-species-data/data/glorys/full_regions_bottom/glorys_o2_nw_full_region_bottom.rds")
#Oxygen
nc_bottom_all2 <- readRDS("~/Dropbox/choke species/code/choke-species-data/data/glorys/full_regions_bottom/glorys_o2_nw_full_region_bottom.rds.rds")
#Oxygen
nc_bottom_all2 <- readRDS("~/Dropbox/choke species/code/choke-species-data/data/glorys/full_regions_bottom/glorys_o2_wc_full_region_bottom.rds.rds")
#Plot time series of one year
ggplot(subset(test, time>as.POSIXct("2011-08-15") & time<as.POSIXct("2011-09-15")), aes(x=time, y=o2))+geom_line()+ylab("Oxygen mmol m^3")+xlab("Date")
test <- subset(nc_bottom_all2, latitude==-125 & longitude==44.5)
View(nc_bottom_all2)
test <- subset(nc_bottom_all2, latitude==-125 & longitude==44.5)
View(nc_bottom_all2)
test <- subset(nc_bottom_all2, latitude==44.5 & longitude==-122)
test <- subset(nc_bottom_all2, latitude==44.50 & longitude==-125)
#Plot time series of one year
ggplot(subset(test, time>as.POSIXct("2011-08-15") & time<as.POSIXct("2011-09-15")), aes(x=time, y=o2))+geom_line()+ylab("Oxygen mmol m^3")+xlab("Date")
##Map of low oxygen values
ggplot(subset(dat, o2_glorys<50), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
##Map of low oxygen values
ggplot(subset(dat, o2_glorys<50), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=0.2)+facet_wrap("year")
##Map of low oxygen values
ggplot(subset(dat, o2_glorys<50 & year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=0.2)+facet_wrap("year")
##Map of low oxygen values
ggplot(subset(dat, o2_glorys<50 & year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
ggplot(dat, aes(x=dist_o2))+geom_histogram()+xlab("Distance between haul and o2 GLORYS (km)")+coast
#Mapping background
map_data <- rnaturalearth::ne_countries(scale = "large", returnclass = "sf")
# crop if you want; not needed:
us_coast <- st_crop(map_data,
c(xmin = -126, ymin = 31, xmax = -110, ymax = 50))
us_coast <- st_crop(map_data,
c(xmin = -126, ymin = 31, xmax = -110, ymax = 50))
View(coast)
View(map_data)
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=depth))+facet_wrap("year")
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=depth_gloryso2))+facet_wrap("year")
#Plot characteristics of oxygen data
ggplot(dat, aes(y=-depth_m, x=o2_glorys))+geom_point()
ggplot(dat, aes(y=-depth_gloryso2, x=o2_glorys))+geom_point()
#Plot characteristics of oxygen data
ggplot(dat, aes(y=-depth_m, x=o2_glorys))+geom_point(aes(colour=depth_glorys_o2))
#Plot characteristics of oxygen data
ggplot(dat, aes(y=-depth_m, x=o2_glorys))+geom_point(aes(colour=depth_gloryso2))
ggplot(dat, aes(y=-depth_m, x=o2_glorys))+geom_point(aes(colour=dist_o2))
ggplot(subset(dat, year==2010), aes(x=lon_start, y=lat_start))+geom_point(aes(color=depth_gloryso2))+facet_wrap("year")
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=depth_gloryso2))+facet_wrap("year")
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
ggplot(subset(dat, year==2010), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
ggplot(subset(dat, year==2005), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
#Plot characteristics of oxygen data
ggplot(dat, aes(y=-depth_m, x=o2_glorys))+geom_point(aes(colour=depth_gloryso2))
ggplot(dat, aes(y=-depth_gloryso2, x=o2_glorys))+geom_point()
ggplot(dat, aes(y=-depth_m, x=o2_glorys))+geom_point(aes(colour=dist_o2))
###Comparison to in situ data
#Convert all oxygen to correct units
#GLORYS is in: o2 [mmol/m3], IPHC oxygen_ml is ml per L
SA = gsw_SA_from_SP(dat$'salinity psu', dat$depth_IPHC,dat$lon_start,dat$lat_start) #absolute salinity for pot T calc
pt = gsw_pt_from_t(SA,dat$'temp c',dat$depth_IPHC) #potential temp at a particular depth
CT = gsw_CT_from_t(SA,dat$'temp c',dat$depth_IPHC) #conservative temp
sigma0 = gsw_sigma0(SA,CT)
o2_umolkg = dat$oxygen_ml/(sigma0+1000)
dat$o2_IPHC <- o2_umolkg
ggplot(subset(dat, year==2010), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(subset(dat, year==2010), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys))+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=1.2)+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(subset(dat, year==2010), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=1.2)+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=4)+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(subset(dat, year==2010), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=4)+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(subset(dat, year==2021), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=3)+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(subset(dat, year==2010), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=3)+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(subset(dat, year==2021 | year==2010), aes(x=lon_start, y=lat_start))+geom_point(aes(color=o2_glorys), size=3)+facet_wrap("year")+theme(legend.position=c(0.8, 0.8))
ggplot(dat, aes(x=depth_diffo2, y=o2_glorys))+geom_point()
ggplot(dat, aes(x=depth_diffo2, y=o2_glorys))+geom_point(aes(colour=depth_m))
###Comparison to in situ data
#GLORYS is in: o2 [mmol/m3], IPHC oxygen_ml is ml per L
#Convert IPHC data
SA = gsw_SA_from_SP(dat$'salinity psu', dat$depth_IPHC,dat$lon_start,dat$lat_start) #absolute salinity for pot T calc
pt = gsw_pt_from_t(SA,dat$'temp c',dat$depth_IPHC) #potential temp at a particular depth
CT = gsw_CT_from_t(SA,dat$'temp c',dat$depth_IPHC) #conservative temp
sigma0 = gsw_sigma0(SA,CT)
o2_umolkg = dat$oxygen_ml/(sigma0+1000)
dat$o2_IPHC <- o2_umolkg
View(IPHC)
IPHC <-  read_excel("~/Dropbox/choke species/code/choke-species-data/data/fish_raw/IPHC/IPHC_FISS_set_halibut.xlsx")
View(IPHC)
min(IPHC$BeginLat)
min(IPHC$BeginLat, na.rm=T)
min(IPHC$BeginLom, na.rm=T)
min(IPHC$BeginLon, na.rm=T)
max(IPHC$BeginLon, na.rm=T)
max(IPHC$BeginLat)
max(IPHC$BeginLat, na.rm=T)
max(IPHC$"BeginDepth (fm)", na.rm=T)
##Pull real data (example sablefish data from Chapter 2) ##
example <- readRDS("/Users/jindiv/Library/CloudStorage/Dropbox/choke species/code/choke-species-data/example_data.rds")
max(example$depth, na.rm=T)
