axis(2, cex.axis=3)
title(xlab="Easting (km)", ylab="Northing (km)", cex.lab=3)
plot(fit$spatial_list$MeshList$anisotropic_spde)
par(mai =  c(bottom, left, top, right))
par(mai =  c(bottom, left, top, right))
par(mai =  c(.5, .5,.5,.5))
plot(fit$spatial_list$MeshList$anisotropic_mesh)
axis(1, cex.axis=3)
axis(2, cex.axis=3)
title(xlab="Easting (km)", ylab="Northing (km)", cex.lab=3)
plot(fit$spatial_list$MeshList$anisotropic_spde)
par(mai =  c(2, 2,2,2))
plot(fit$spatial_list$MeshList$anisotropic_mesh)
axis(1, cex.axis=3)
axis(2, cex.axis=3)
title(xlab="Easting (km)", ylab="Northing (km)", cex.lab=3)
plot(fit$spatial_list$MeshList$anisotropic_spde)
library(TMB)
install.packages("mvtnorm")
library(mvtnorm)
install.packages("mgcv")
library(mgcv)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
#Data
dat <- readRDS("~/Dropbox/choke species/code/thresholds_mi_distribution/data/data_sablefish2.rds")
env.dat <- dplyr::select(dat, "po2", "depth", "temp")
var.covar <- var(log(env.dat))
env.bar <- colMeans(log(env.dat))
ndata <- 1000
log.env <- rmvnorm(n = ndata, env.bar - diag(var.covar) / 2, var.covar)
env <- data.frame(exp(log.env))
## code to simulate data and then fit
Eo <- 0.004525966
#Ao <- 1.780791e-07
#n <- -0.303949
#B = 1000 # size in grams, roughly average
#avgbn <-0.1124206  # this works for the adult class (0.5 - 6 kg).  for the large adult, adjust
kelvin = 273.15
boltz = 0.000086173324
#Just doing e0
env$mi = env$po2*exp(Eo/(boltz*(env$temp+kelvin)))
#Visualize simulated mi data
plot(env$mi)
mi_crit <- 400
env$log_depth_scaled <- scale(log(env$depth))
env$log_depth_scaled2 <- env$log_depth_scaled^2
beta_0 <- 1
beta_1 <- 1.68
beta_2 <- -0.98
beta_3 <- 1
tweedie_p <- 1.52
tweedie_disp <- 7.02
#theta <- p=1 + exp(theta) / 1 + exp(theta)
#logphi <- log(tweedie_disp)
b3 <- as.array(c(beta_3,mi_crit))
logmu <- beta_3 * apply(cbind(env$mi, mi_crit), FUN = min, MAR = 1)
catch <- rTweedie(exp(logmu), p = tweedie_p, phi = tweedie_disp)
install.packages(‘parallel’)
install.packages("parallel")
library(parallel)
logmu <- beta_3 * mclapply(cbind(env$mi, mi_crit), FUN = min, MAR = 1)
logmu <- beta_3 * apply(cbind(env$mi, mi_crit), FUN = min, MAR = 1)
catch <- rTweedie(exp(logmu), p = tweedie_p, phi = tweedie_disp)
?rTweedie
#Visualize logmu
plot(logmu)
mu <- exp(logmu)
catch <- rTweedie(mu, p = tweedie_p, phi = tweedie_disp)
catch <- rtweedie(exp(logmu), p = tweedie_p, phi = tweedie_disp)
catch <- rTweedie(mu, p = tweedie_p, phi = tweedie_disp)
catch <- rTweedie(mu, p = tweedie_p, phi = tweedie_disp)
gc()
#Data
dat <- readRDS("~/Dropbox/choke species/code/thresholds_mi_distribution/data/data_sablefish2.rds")
env.dat <- dplyr::select(dat, "po2", "depth", "temp")
var.covar <- var(log(env.dat))
env.bar <- colMeans(log(env.dat))
ndata <- 1000
log.env <- rmvnorm(n = ndata, env.bar - diag(var.covar) / 2, var.covar)
env <- data.frame(exp(log.env))
## code to simulate data and then fit
Eo <- 0.004525966
#Ao <- 1.780791e-07
#n <- -0.303949
#B = 1000 # size in grams, roughly average
#avgbn <-0.1124206  # this works for the adult class (0.5 - 6 kg).  for the large adult, adjust
kelvin = 273.15
boltz = 0.000086173324
#Just doing e0
env$mi = env$po2*exp(Eo/(boltz*(env$temp+kelvin)))
#Visualize simulated mi data
plot(env$mi)
mi_crit <- 400
env$log_depth_scaled <- scale(log(env$depth))
env$log_depth_scaled2 <- env$log_depth_scaled^2
beta_0 <- 1
beta_1 <- 1.68
beta_2 <- -0.98
beta_3 <- 1
tweedie_p <- 1.52
tweedie_disp <- 7.02
#theta <- p=1 + exp(theta) / 1 + exp(theta)
#logphi <- log(tweedie_disp)
b3 <- as.array(c(beta_3,mi_crit))
logmu <- beta_3 * apply(cbind(env$mi, mi_crit), FUN = min, MAR = 1)
mu <- exp(logmu)
env <- data.frame(exp(log.env))
log.env <- rmvnorm(n = ndata, env.bar - diag(var.covar) / 2, var.covar)
library(mvtnorm)
library(mgcv)
log.env <- rmvnorm(n = ndata, env.bar - diag(var.covar) / 2, var.covar)
env <- data.frame(exp(log.env))
## code to simulate data and then fit
Eo <- 0.004525966
#Ao <- 1.780791e-07
#n <- -0.303949
#B = 1000 # size in grams, roughly average
#avgbn <-0.1124206  # this works for the adult class (0.5 - 6 kg).  for the large adult, adjust
kelvin = 273.15
boltz = 0.000086173324
#Just doing e0
env$mi = env$po2*exp(Eo/(boltz*(env$temp+kelvin)))
#Visualize simulated mi data
plot(env$mi)
mi_crit <- 400
env$log_depth_scaled <- scale(log(env$depth))
env$log_depth_scaled2 <- env$log_depth_scaled^2
beta_0 <- 1
beta_1 <- 1.68
beta_2 <- -0.98
beta_3 <- 1
tweedie_p <- 1.52
tweedie_disp <- 7.02
#theta <- p=1 + exp(theta) / 1 + exp(theta)
#logphi <- log(tweedie_disp)
b3 <- as.array(c(beta_3,mi_crit))
logmu <- beta_3 * apply(cbind(env$mi, mi_crit), FUN = min, MAR = 1)
mu <- exp(logmu)
#Visualize logmu
plot(logmu)
catch <- rTweedie(mu, p = tweedie_p, phi = tweedie_disp)
gc()
catch <- rTweedie(mu, p = tweedie_p, phi = tweedie_disp)
gc()
install.packages("remotes")
library(remotes)
remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE, ref="mi")
library(sdmTMB)
library(here)
library(mvtnorm)
library(mgcv)
library(dplyr)
library(devtools)
library(zoo)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
install.packages("remotes")
?expect_error
beta1 <- -0.4
beta3 <- 0.3
delta <- 3
Eo <- 0.1
x50 <- 5
N <- 3000
set.seed(123)
invtemp <- rnorm(N)
po2 <- rlnorm(N)
mi <- po2 * exp(Eo * invtemp)
log_mu <- beta1 + beta3 * (1 / (1 + exp(-log(19) * (mi - x50) / delta)) - 1)
mu <- exp(log_mu)
# plot(mu)
# plot(mi, log_mu)
# plot(mi, mu)
sigma <- 0.05
obs <- rlnorm(N, log_mu - 0.5 * sigma^2, sigma)
if (FALSE) {
plot(mi, log(mu))
plot(mi, log(obs))
}
#Dataframe missing po2
dat <- data.frame(y = obs, invtemp = invtemp)
#Dataframe missing invtemp
dat2 <- data.frame(y = obs, po2 = po2)
#Dataframe includes mi
dat3 <- data.frame(y = obs, po2 = po2, invtemp=invtemp, mi=mi)
#Starting parameters
start <- matrix(0, ncol = 1, nrow = 4)
start[1,1] <- x50
start[2,1] <- delta
start[3,1] <- beta3
start[4,1] <- Eo
m2 <- sdmTMB(y ~ logistic(mi), data = dat, spatial = "off",
family = lognormal(),
control = sdmTMBcontrol(start = list(b_threshold = start)))
m2 <- sdmTMB(y ~ logistic(mi), data = dat3, spatial = "off",
family = lognormal(),
control = sdmTMBcontrol(start = list(b_threshold = start)))
View(m2)
library(ggeffects)
library("ggeffects")
mydf <- ggpredict(m2, terms = "mi")
dplyr_installed <- require("dplyr", quietly = TRUE)
ggplot_installed <- require("ggplot2", quietly = TRUE)
inla_installed <- requireNamespace("INLA", quietly = TRUE)
pkgs <- dplyr_installed && ggplot_installed && inla_installed
EVAL <- identical(Sys.getenv("NOT_CRAN"), "true") && pkgs
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 7,
fig.asp = 0.618,
eval = EVAL,
purl = EVAL
)
library("ggeffects")
mydf <- ggpredict(m2, terms = "mi")
library("prediction")
install.packages("prediction")
install.packages("prediction")
library("prediction")
mydf <- ggpredict(m2, terms = "mi")
beta1 <- -0.4
beta3 <- 0.3
delta <- 3
x50 <- 5
log_mu <- beta1 + beta3 * (1 / (1 + exp(-log(19) * (mi - x50) / delta)) - 1)
mu <- exp(log_mu)
obs <- rlnorm(N, log_mu - 0.5 * sigma^2, sigma)
dat <- data.frame(y = obs, po2 = po2, invtemp = invtemp)
start <- matrix(0, ncol = 1, nrow = 4)
start[1,1] <- x50
start[2,1] <- delta
start[3,1] <- beta3
start[4,1] <- Eo
m2 <- sdmTMB(y ~ logistic(mi),
data = dat,
spatial = "off",
family = lognormal(),
control = sdmTMBcontrol(start = list(b_threshold = start))) #Specify starting parameters
tidy(m2)
print(m2)
mydf <- ggpredict(m2, terms = "mi")
library(visreg)
visreg(m2, xvar="mi")
#Generate random temperature and oxygen data
N <- 3000
set.seed(123)
temp <- rnorm(N)
po2 <- rlnorm(N)
kelvin = 273.15 #For converting celsius to Kelvin
boltz = 0.000086173324 #Boltzmann's constant
tref <- 12 #Reference temperature
#Calcualte inverse temperature
env$invtemp <- (1 / boltz)  * ( 1 / (temp + 273.15) - 1 / (tref + 273.15))
#Generate random temperature and oxygen data
N <- 3000
set.seed(123)
temp <- rnorm(N)
po2 <- rlnorm(N)
kelvin = 273.15 #For converting celsius to Kelvin
boltz = 0.000086173324 #Boltzmann's constant
tref <- 12 #Reference temperature
#Calcualte inverse temperature
env$invtemp <- (1 / boltz)  * ( 1 / (temp + 273.15) - 1 / (tref + 273.15))
#Generate random temperature and oxygen data
N <- 3000
set.seed(123)
temp <- rnorm(N)
po2 <- rlnorm(N)
kelvin = 273.15 #For converting celsius to Kelvin
boltz = 0.000086173324 #Boltzmann's constant
tref <- 12 #Reference temperature
#Calculate inverse temperature
invtemp <- (1 / boltz)  * ( 1 / (temp + 273.15) - 1 / (tref + 273.15))
Eo <-  0.3
mi <- po2 * exp(Eo * invtemp)
Eo <-  0.3
mi <- po2 * exp(Eo * invtemp)
beta1 <- -0.4
beta3 <- 0.3
delta <- 3
x50 <- 5
log_mu <- beta1 + beta3 * (1 / (1 + exp(-log(19) * (mi - x50) / delta)) - 1)
mu <- exp(log_mu)
obs <- rlnorm(N, log_mu - 0.5 * sigma^2, sigma)
beta1 <- -0.4
beta3 <- 0.3
delta <- 3
x50 <- 5
log_mu <- beta1 + beta3 * (1 / (1 + exp(-log(19) * (mi - x50) / delta)) - 1)
mu <- exp(log_mu)
sigma <- 0.05
obs <- rlnorm(N, log_mu - 0.5 * sigma^2, sigma)
dat <- data.frame(y = obs, po2 = po2, invtemp = invtemp)
start <- matrix(0, ncol = 1, nrow = 4)
start[1,1] <- x50
start[2,1] <- delta
start[3,1] <- beta3
start[4,1] <- Eo
m2 <- sdmTMB(y ~ logistic(mi),
data = dat,
spatial = "off",
family = lognormal(),
control = sdmTMBcontrol(start = list(b_threshold = start))) #Specify starting parameters
tidy(m2)
print(m2)
ggpredict(m2, terms="mi")
ggpredict(m2, terms="mi")
visreg(m2, xvar="mi")
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
install.packages("ncdf4")
library(ncdf4) # package for netcdf manipulation
nc_data <- nc_open('~/Dropbox/Mac (2)/Downloads/cmems_mod_glo_bgc_my_0.25_P1D-m_1691610748846.nc')
library(CopernicusMarine)
library(lubridate)
###Temperature data
download5 <- function(start, end){
copernicus_download_motu(
username = "jindivero",
password = "MaRcH131995**",
destination= "~/Dropbox/Mac (2)/Downloads",
product= "GLOBAL_MULTIYEAR_PHY_001_030",
layer= "cmems_mod_glo_phy_my_0.083_P1D-m",
variable="po2",
output="netcdf",
region=c(-179.6, 51,-133, 65),
timerange=c(start, end),
verticalrange=c(9,1300),
overwrite = FALSE
)
}
starts5a <- seq(ymd(20090701), ymd(20200701), by="1 year")
ends5a <- seq(ymd(20090831), ymd(20200831), by="1 year")
mapply(download5, starts5a, ends5a)
library(ncdf4)
library(lubridate)
library(dplyr)
#List files
files <- list.files("~/Dropbox/choke species/code/choke-species-data/data/Copernicus/o2/alaska", all.files=T, pattern=".nc", full.names=T)
files2 <- list.files("~/Dropbox/choke species/code/choke-species-data/data/Copernicus/o2/nwfsc", all.files=T, pattern=".nc", full.names=T)
files3 <- list.files("~/Dropbox/choke species/code/choke-species-data/data/Copernicus/o2/bc", all.files=T, pattern=".nc", full.names=T)
files <- append(files, files2)
files <- append(files, files3)
# Function to extract all information from each one
extract_info <- function(file){
#Extract coordinates, time, depth
nc_ds <-  nc_open(file)
dim_lon <- ncvar_get(nc_ds, "longitude")
dim_lat <- ncvar_get(nc_ds, "latitude")
dim_depth <- ncvar_get(nc_ds, "depth")
dim_time <- ncvar_get(nc_ds, "time")
#Convert time to YYY-MM-DD format
t_units <- ncatt_get(nc_ds, "time", "units")
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + dhours(dim_time)
#Create coordinates
coords <- as.matrix(expand.grid(dim_lon, dim_lat, dim_depth, date))
#Extract the variables
var1 <- ncvar_get(nc_ds, "o2", collapse_degen=FALSE)
nc_df <- matrix(cbind(coords, var1))
names(nc_df) <- c("lon", "lat", "depth", "time", "po2")
return(nc_df)
}
o2 <- lapply(files, extract_info)
gc()
o2 <- mclapply(files, extract_info)
library(parallel)
o2 <- mclapply(files, extract_info)
# Function to extract all information from each one
extract_info <- function(file){
#Extract coordinates, time, depth
nc_ds <-  nc_open(file)
dim_lon <- ncvar_get(nc_ds, "longitude")
dim_lat <- ncvar_get(nc_ds, "latitude")
dim_depth <- ncvar_get(nc_ds, "depth")
dim_time <- ncvar_get(nc_ds, "time")
#Convert time to YYY-MM-DD format
t_units <- ncatt_get(nc_ds, "time", "units")
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + dhours(dim_time)
#Create coordinates
coords <- as.matrix(expand.grid(dim_lon, dim_lat, dim_depth, date))
#Extract the variables
var1 <- ncvar_get(nc_ds, "o2", collapse_degen=FALSE)
nc_df <- as.data.frame(cbind(coords, var1))
names(nc_df) <- c("lon", "lat", "depth", "time", "po2")
return(nc_df)
}
?mclapply
o2 <- mclapply(files, extract_info)
View(o2)
View(o2)
##Data from IPHC ##
iphc_other <- read_excel("~/raw/IPHC/IPHC_FISS_other.xlsx")
iphc_halibut <- read_excel("~/raw/IPHC/IPHC_FISS_set_halibut.xlsx")
library(dplyr)
library(tidyr)
library(readxl)
library(taxize)
### load helper functions ####
source("util_funs.R")
##Data from IPHC ##
iphc_other <- read_excel("~/raw/IPHC/IPHC_FISS_other.xlsx")
iphc_halibut <- read_excel("~/raw/IPHC/IPHC_FISS_set_halibut.xlsx")
setwd("~/Dropbox/choke species/code/choke-species-data")
### load helper functions ####
source("util_funs.R")
##Data from IPHC ##
iphc_other <- read_excel("~/data/fish_raw/IPHC/IPHC_FISS_other.xlsx")
iphc_halibut <- read_excel("~/data/fish_raw/IPHC/IPHC_FISS_set_halibut.xlsx")
getwd()
##Data from IPHC ##
iphc_other <- read_excel("~/Users/jindiv/Dropbox/choke species/code/choke-species-datadata/fish_raw/IPHC/IPHC_FISS_other.xlsx")
##Data from IPHC ##
iphc_other <- read_excel("~/Users/jindiv/Dropbox/choke species/code/choke-species-data/data/fish_raw/IPHC/IPHC_FISS_other.xlsx")
iphc_halibut <- read_excel("~/data/fish_raw/IPHC/IPHC_FISS_set_halibut.xlsx")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
##Data from IPHC ##
iphc_other <- read_excel("~/Users/jindiv/Dropbox/choke species/code/choke-species-data/data/fish_raw/IPHC/IPHC_FISS_other.xlsx")
##Data from IPHC ##
iphc_other <- read_excel("~/Dropbox/choke species/code/choke-species-data/data/fish_raw/IPHC/IPHC_FISS_other.xlsx")
iphc_halibut <- read_excel("~/Dropbox/choke species/code/choke-species-data/data/fish_raw/IPHC/IPHC_FISS_set_halibut.xlsx")
View(iphc_halibut)
#Prepare data
source("Code/util_funs.R")
sci_name <- "Anoplopoma fimbria"
spc <- "sablefish"
dat.by.size <- length_expand(sci_name)
data_combined <- readRDS("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data/data/data_combined.rds")
View(data_combined)
install.packages("dplyr")
library(dplyr)
library(tidyr)
install.packages("readxl")
library(readxl)
library(taxize)
install.packages("dplyr")
install.packages("readxl")
### load helper functions ####
source("util_funs.R")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
load("~/data/fish_raw/NOAA/afsc_haul.rda")
load("~/data/fish_raw/NOAA/nwfsc_catch.rda")
load("~/data/fish_raw/NOAA/nwfsc_haul.rda")
setwd("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data")
#Packages
install.packages("dplyr")
install.packages("dplyr")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
setwd("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~data/fish_raw/NOAA/afsc_catch.rda")
setwd("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
load("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data/data/fish_raw/NOAA/afsc_catch.rda")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
setwd("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
load("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data/data/fish_raw/NOAA/afsc_catch.rda")
setwd("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
readRDS("~/data/fish_raw/NOAA/afsc_catch.rda")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("/data/fish_raw/NOAA/afsc_catch.rda")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
getwd()
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
setwd("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data")
### Raw Data ###
## Haul and catch data from https://github.com/DFO-NOAA-Pacific/surveyjoin ##
load("~/data/fish_raw/NOAA/afsc_catch.rda")
sci_name <- "Anoplopoma fimbria"
spc <- "sablefish"
#Prepare data
source("Code/util_funs.R")
setwd("~/Library/CloudStorage/Dropbox/choke species/code/choke-species-data")
sci_name <- "Anoplopoma fimbria"
spc <- "sablefish"
dat.by.size <- length_expand(sci_name)
dat <- load_data(spc = spc, dat.by.size = dat.by.size)
